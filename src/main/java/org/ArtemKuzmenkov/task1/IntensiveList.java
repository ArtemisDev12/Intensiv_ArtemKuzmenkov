package org.ArtemKuzmenkov.task1;

import java.util.Comparator;

public interface IntensiveList<E> {

    /**
     * @return возвращает размер коллекции (количество ее элементов).
     */
    int size();

    /**
     * Добавляет элемент в конец коллекции.
     * @param element представляет элемент, добавляемый в конец коллекции.
     */
    void add(E element);

    /**
     * Добавляет элемент коллекции в выбранную позицию.
     * @param index представляет собой позицию, куда будет вставлен элемент.
     * @param element представляет элемент, добавляемый в позицию index.
     * @throws IndexOutOfBoundsException если индекс находится вне допустимого диапазона (index < 0 || index >= size()).
     */
    void add(int index, E element);

    /**
     * Получение элемента коллекции по заданной позиции.
     * @param index представляет собой позицию, откуда будет получен элемент коллекции.
     * @return возвращает элемент коллекции с заданной позиции.
     * @throws IndexOutOfBoundsException если индекс находится вне допустимого диапазона (index < 0 || index >= size()).
     */
    E get(int index);

    /**
     * Функция заменяет один элемент на другой, возвращая первый.
     * @param index представляет собой позицию заменяемого элемента в коллекции.
     * @param element представляет собой элемент, который заменит собой элемент в позиции index.
     * @return возвращает элемент, который был заменен.
     * @throws IndexOutOfBoundsException если индекс находится вне допустимого диапазона (index < 0 || index >= size()).
     */
    E set(int index, E element);

    /**
     * Удаление элемента в заданной позиции.
     * @param index представляет собой позицию элемента в коллекции.
     * @return возвращает удаляемый элемент.
     * @throws IndexOutOfBoundsException если индекс находится вне допустимого диапазона (index < 0 || index >= size()).
     */
    E remove(int index);

    /**
     * Очищает коллекцию и устанавливает стандартный размер равный 10.
     */
    void clear(); //удаляем все элементы, capacity приводим к дефолтному

    /**
     * Сортирует коллекцию по правилу, указанному в Comparator.
     * @param comparator представляет собой объект Comparator, реализованный для нужной сортировки.
     */
    void quickSort(Comparator<E> comparator); //реализуем быструю сортировку, дефолт по возрастанию

    /**
     * @return возвращает состояние коллекции, отсортирована она или нет.
     */
    boolean isSorted();

    /**
     * Обрезает коллекцию до указанного размера.
     * @param size представляет собой размер обрезания коллекции.
     * @throws IllegalArgumentException размер некорректен size < 0 или size > размера коллекции.
     */
    void split(int size);//обрезаем список до указанного размера
}
